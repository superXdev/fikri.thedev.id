[
  {
    "title": "Download ebook Soldity gratis!",
    "description": "Dilengkapi dengan contoh praktis, best practice, dan konsep yang lebih advanced.",
    "dateFormatted": "October 28, 2024",
    "content": "![Daftar isi](/assets/images/posts/ebook.png)",
    "link": "/post/download-ebook-solidity-gratis"
  },
  {
    "title": "Perbedaan programmer, developer dan software engineer",
    "description": "Berikut perbedaan programmer, developer dan software engineer.",
    "dateFormatted": "October 24, 2023",
    "content": "**Programmer**\n\nSeorang *programmer* adalah seseorang yang memiliki keterampilan dalam menulis kode komputer. Mereka biasanya bertanggung jawab untuk mengubah ide dan spesifikasi menjadi kode yang dapat dieksekusi oleh komputer. Biasanya, programmer fokus pada tugas-tugas berikut:\n\n- Menulis kode sumber untuk menjalankan fungsi atau tugas tertentu.\n- Memahami dan menerapkan algoritma.\n- Mengatasi masalah teknis dalam kode.\n- Memahami bahasa pemrograman dan berbagai kerangka kerja.\n\n**Developer**\n\nSeorang *developer* (pengembang) adalah istilah yang lebih umum dan sering digunakan secara bergantian dengan *programmer*. Meskipun ada tumpang tindih dalam peran, pengembang cenderung memiliki cakupan pekerjaan yang lebih luas daripada programmer. Ini meliputi:\n\n- Merancang, mengembangkan, dan menguji perangkat lunak.\n- Memahami persyaratan proyek dan berkomunikasi dengan pemangku kepentingan.\n- Memelihara perangkat lunak, mengatasi bug, dan melakukan pembaruan.\n- Mungkin terlibat dalam pengembangan front-end (antarmuka pengguna) atau back-end (server dan basis data).\n\n**Software Engineer**\n\nSeorang *software engineer* (insinyur perangkat lunak) adalah seseorang yang memiliki pengetahuan teknis yang lebih mendalam dalam rekayasa perangkat lunak. Mereka biasanya memiliki pendidikan formal dalam ilmu komputer atau disiplin terkait. Peran seorang insinyur perangkat lunak mencakup:\n\n- Merancang sistem perangkat lunak yang kompleks dan scalable.\n- Menerapkan prinsip-prinsip rekayasa perangkat lunak seperti desain berorientasi objek, pola desain, dan pengujian yang ketat.\n- Memahami aspek keamanan perangkat lunak dan mengidentifikasi potensi kerentanannya.\n- Berpartisipasi dalam proses pengembangan perangkat lunak dari awal hingga akhir.\n\nJadi, meskipun ada tumpang tindih dalam peran-peran ini, *programmer* biasanya lebih berfokus pada menulis kode, *developer* lebih cenderung pada pengembangan dan pemeliharaan perangkat lunak, dan *software engineer* memiliki pemahaman mendalam tentang rekayasa perangkat lunak.",
    "link": "/post/perbedaan-programmer-developer"
  },
  {
    "title": "Bun - All in one JavaScript runtime",
    "description": "Bun is a JavaScript runtime that is designed to be a drop-in replacement for Node.js.",
    "dateFormatted": "October 24, 2023",
    "content": "![Bun](/assets/images/posts/bun.avif)\n\n**Bun** is a JavaScript runtime that is designed to be a drop-in replacement for Node.js. It is written in Zig and powered by JavaScript Core, which is the JavaScript engine used by Apple's Safari web browser.\n\nBun claims to be faster than Node.js, and it also has a smaller memory footprint. It also has a built-in bundler, test runner, and package manager, which makes it a more complete development toolkit than Node.js.\n\nHere are some of the key features of Bun:\n\n- **Fast**: Bun is designed to be fast and efficient. It uses a variety of techniques to improve performance, such as:\n  - Using a lightweight runtime\n  - Compiling JavaScript to native code\n  - Using a minimal set of APIs\n\n- **Lightweight**: Bun has a small memory footprint. This makes it ideal for running on devices with limited resources, such as IoT devices and mobile phones.\n\n- **Complete toolkit**: Bun includes a built-in bundler, test runner, and package manager. This makes it a complete development toolkit for JavaScript applications.\n\n- **Extensible**: Bun is extensible. You can write your own plugins and extensions to add new features or improve performance.\n\nHere are some of the use cases of Bun:\n\n- Building web applications\n- Building serverless applications\n- Running microservices\n- Developing IoT applications\n- Developing mobile applications\n\n**Installing Bun**:\n- It is supported for macOS, Linux, and WSL.\n- Bun provides a limited, experimental native build for Windows. At the moment, only the Bun runtime is supported.",
    "link": "/post/what-bun"
  }
]